### Returns boxes and its matrices generated by faster-rcnn
import os, sys, cv2
import os.path as osp
import pickle
import itertools
import numpy as np
from bt_net.nms import py_cpu_nms, py_area_fix
from bt_net.config import cfg
from preprocessing.preprocess_images import preprocess_array
from operator import itemgetter
from random import randint
import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt

def vis_proposals(img_path, im, dets, thresh = 0.8):
    inds = np.where(dets[:, -1] >= thresh)[0]
    if len(inds) == 0:
        return
    
    class_name = 'obj'
    im = im[:, :, (2, 1, 0)]
    fig, ax = plt.subplots(figsize=(12, 12))
    ax.imshow(im, aspect='equal', interpolation='nearest')
    for i in inds:
        bbox = dets[i, :4]
        score = dets[i, -1]
        make_color = lambda: (float(randint(50, 255))/255, float(randint(50, 255))/255, float(randint(50, 255))/255)
        color = make_color()
        ax.add_patch(
            plt.Rectangle((bbox[0], bbox[1]),
                          bbox[2] - bbox[0],
                          bbox[3] - bbox[1], fill=False,
                          edgecolor=color, linewidth=3.5)
            )
        '''
        ax.text(bbox[0], bbox[1] - 2,
                '{:s} {:.3f}'.format(class_name, score),
                bbox=dict(facecolor='blue', alpha=0.5),
                fontsize=14, color='white')

        ax.set_title(('{} detections with '
                  'p({} | box) >= {:.1f}').format(class_name, class_name,
                                           thresh),          fontsize=14)
        '''
    plt.axis('off')
    plt.tight_layout()
    #plt.draw()
    print img_path
    plt.savefig(img_path)
    print 'Saved: {}'.format(img_path)

def boxes_to_images(img_path, image, dets, target_size = (299, 299)):
    images = []
    '''
    import cv2
    img = cv2.imread(img_path)
    vis_proposals(img_path[:-4] + 'frcnn.jpg', img, dets, thresh = 0.0)
    sys.exit(0)
    '''
    for i in range(len(dets)):
        bbox = dets[i, :4]
        '''
        y1:y2, x1:x2
        '''
        box = image[int(bbox[1]):int(bbox[3]), int(bbox[0]):int(bbox[2])]
        h,w,color = box.shape
        if h == 0 or w ==0:
            '''
                edge case for preprocess_array
            '''
            continue
        img = preprocess_array(box)
        images.append(img)
    h, w, color = image.shape
    if h != 0 or w != 0:
        '''
        edge case for preprocess_array
        '''
        images.append(preprocess_array(image))
    return np.array(images)
    
def load_frcnn_boxes(imdb):
    """
    Loads the precomputed boxes and features from py-faster-rcnn
    """
    location = osp.join(cfg.FASTER_RCNN_DIR, 'output', 'default', imdb.name, 'VGG16_faster_rcnn_final')
    data_file = osp.join(location, 'VGG16_faster_rcnn_final_rpn_proposals.pkl')
    scores_file = osp.join(location, 'VGG16_faster_rcnn_final_rpn_proposals_scores.pkl')
    
    data = np.array(pickle.load(open(data_file, 'rb')))
    scores = np.array(pickle.load(open(scores_file, 'rb')))

    boxes = []
    for d, s in itertools.izip(data, scores):
        dets = np.hstack((d, s))
        keep = py_cpu_nms(dets[:30, :], 1)
        boxes.append(np.array([dets[i] for i in keep]))
    return boxes

def load_all_boxes_yolo(imdb):
    root_dir = cfg.ROOT_DIR
    if "test" in imdb.name or "Test" in imdb.name:
        pickle_dir = osp.join(root_dir, "snapshots", "nus_wide_test_81_nms.p")
    else:
        pickle_dir = osp.join(root_dir, "snapshots","nus_wide_train_920.p")
    dictionary = pickle.load(open(pickle_dir, "rb"))
    return dictionary

def load_image_boxes_yolo(image, dictionary, x_path):

    img_path = x_path


    x_path = x_path.split("/")
    x_path = x_path[-1].split(".")
    x_path = x_path[0]
    #print "path",x_path
    if x_path not in dictionary:
        return np.array([]) # returning empty array if not existing
    ####
    #### x1 y1 x2 y2 prob
    ####
    boxes = dictionary[x_path]
    '''
    Sort on prob
    '''
    boxes = sorted(boxes, key=itemgetter(4))
    boxes = np.array(boxes[:100])
    #print "len of boxes before nms", len(boxes)
    keep = py_cpu_nms(boxes, 0.5)
    boxes = np.array([boxes[ind] for ind in keep])
    '''
    import cv2
    img = cv2.imread(img_path)
    vis_proposals(img_path[:-4] + 'yolo.jpg', img, boxes, thresh = 0.0)
    sys.exit(0)
    '''
    #keep = py_area_fix(image, boxes, 0.3)
    #boxes = np.array([boxes[ind] for ind in keep])
    #print "len of boxes after nms", len(boxes)
    boxes = boxes_to_images(image, boxes, target_size=(299, 299))
    return boxes
        

    
    
